[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button> Button</button>\n      <footer>Contentinfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" src=\"https://picsum.photos/50\" /> Image\n      <input type=\"checkbox\" /> Checkbox\n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> TextBox\n      <li>Listitem</li>\n      <ul>Listgroup</ul>\n    </div>\n  );\n}\n\n// We need to render the component unlike when we are testing when using rtl book\nrender(<RoleExample />);","type":"code","id":"hw5ki"},{"content":"test('can find elements by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'textbox',\n    'listitem',\n    // Using listgroup will result in an error we need to use list\n    'list',\n  ];\n\n  // Iterate through this array that was created\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n\n    expect(el).toBeInTheDocument();\n  }\n});","type":"code","id":"a9ib8"},{"content":"function AccessibleName() {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  );\n}\n\nrender(<AccessibleName />);","type":"code","id":"0x8em"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  // The use of getByRole is only expecting one button element\n  // There are two buttons and will result in an error\n  // So we need to be more specific and target the text for each button\n  const submitButton = screen.getByRole('button', {\n    // We can use a string as the accessible name like 'Submit'\n    // The more precise way is to use a regex matcher\n    name: /submit/i,\n  });\n\n  const cancelButton = screen.getByRole('button', {\n    // We can use a string as the accessible name like 'Cancel'\n    // The more precise way is to use a regex matcher\n    name: /cancel/i,\n  });\n\n  expect(submitButton).toBeInTheDocument();\n  expect(cancelButton).toBeInTheDocument();\n});","type":"code","id":"p6v4z"},{"content":"function MoreNames() {\n  return (\n    <div>\n      <label htmlFor=\"email\"> Email </label>\n      <input id=\"email\" />\n\n      <label htmlFor=\"search\"> Search </label>\n      <input id=\"search\" />\n    </div>\n  );\n}\nrender(<MoreNames />);","type":"code","id":"lq4vp"},{"content":"test('displays an email and search input', () => {\n  render(<MoreNames />);\n\n  // Common error is seen when trying to getByRole as it is singular\n  // Meaning that we will need to use a different approach\n  // We will need to tie the input with the label for the input being tested\n  const emailInput = screen.getByRole('textbox', {\n    name: /email/i,\n  });\n\n  const searchInput = screen.getByRole('textbox', {\n    name: /search/i,\n  });\n\n  expect(emailInput).toBeInTheDocument();\n  expect(searchInput).toBeInTheDocument();\n});","type":"code","id":"28vw2"},{"content":"function IconButtons() {\n  return (\n    <div>\n      <button aria-label=\"sign-in-button\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          width=\"24\"\n        >\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path d=\"M12 2c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm9 7h-6v13h-2v-6h-2v6H9V9H3V7h18v2z\" />\n        </svg>\n      </button>\n\n      <button aria-label=\"sign-out-button\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          height=\"24\"\n          viewBox=\"0 0 24 24\"\n          width=\"24\"\n        >\n          <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n          <path d=\"M20.5 6c-2.61.7-5.67 1-8.5 1s-5.89-.3-8.5-1L3 8c1.86.5 4 .83 6 1v13h2v-6h2v6h2V9c2-.17 4.14-.5 6-1l-.5-2zM12 6c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2z\" />\n        </svg>\n      </button>\n    </div>\n  );\n}\n\nrender(<IconButtons />);","type":"code","id":"40qd2"},{"content":"test('find elements based on label', () => {\r\n  render(<IconButtons />);\r\n\r\n  const signInButton = screen.getByRole('button', {\r\n    name: /sign-in/i\r\n  });\r\n\r\n    const signOutButton = screen.getByRole('button', {\r\n    name: /sign-out/i\r\n  });\r\n\r\n  expect(signInButton).toBeInTheDocument();\r\n  expect(signOutButton).toBeInTheDocument();\r\n\r\n\r\n});","type":"code","id":"0k8bs"}]